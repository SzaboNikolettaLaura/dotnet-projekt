@page "/grades"
@using System.IO
@using CsvHelper
@using CsvHelper.Configuration
@using System.Collections.Concurrent

<div class="container py-5">
    <div class="row justify-content-center mb-5">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <h1 class="display-5 mb-4 text-center">Jegyek</h1>
                    
                    <div class="row g-3">
                        <div class="col-md-8">
                            <div class="input-group">
                                <span class="input-group-text bg-light">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Jegyek keresése..." @bind="searchQuery" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text bg-light">
                                    <i class="bi bi-calendar"></i>
                                </span>
                                <select class="form-select" id="yearSelect" @bind="selectedYear">
                                    <option value="2014">2014</option>
                                    <option value="2015">2015</option>
                                    <option value="2016">2016</option>
                                    <option value="2017">2017</option>
                                    <option value="2018">2018</option>
                                    <option value="2019">2019</option>
                                    <option value="2020">2020</option>
                                    <option value="2021">2021</option>
                                    <option value="2022">2022</option>
                                    <option value="2023">2023</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (headers != null)
    {
        <div class="card shadow-sm">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            @foreach (var header in headers)
                            {
                                <th class="py-3">@header</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var grade in GetPagedData())
                        {
                            <tr>
                                @foreach (var value in grade.Values)
                                {
                                    <td class="py-3">@value</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="d-flex justify-content-center align-items-center mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination mb-0">
                    <li class="page-item @(page == 0 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => { page = Math.Max(0, page - 1); StateHasChanged(); }">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                    </li>
                    <li class="page-item disabled">
                        <span class="page-link">@(page + 1). oldal @totalPages-ból</span>
                    </li>
                    <li class="page-item @(page >= totalPages - 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => { page++; StateHasChanged(); }">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                Nincsenek elérhető adatok.
            </div>
        </div>
    }
</div>

<style>
    .table th {
        font-weight: 600;
        border-bottom: 2px solid #dee2e6;
    }

    .table td {
        vertical-align: middle;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0,0,0,.02);
    }

    .page-link {
        padding: 0.5rem 1rem;
    }

    .page-item.disabled .page-link {
        background-color: #f8f9fa;
        border-color: #dee2e6;
    }
</style>

@code {
    private string searchQuery = "";
    private string selectedYear = "2014";
    private ConcurrentDictionary<string, List<Dictionary<string, string>>> cache = new();
    private List<string> headers;
    private int page = 0;
    private const int PAGE_SIZE = 20;
    private int totalRecords = 0;

    private List<Dictionary<string, string>> GetPagedData()
    {
        if (!cache.ContainsKey(selectedYear))
        {
            LoadGrades();
        }

        var data = cache[selectedYear];
        var filtered = data.Where(g => 
            g.Values.Any(v => v.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
            .Skip(page * PAGE_SIZE)
            .Take(PAGE_SIZE)
            .ToList();

        totalRecords = data.Count;
        return filtered;
    }

    private int totalPages => (int)Math.Ceiling((double)totalRecords / PAGE_SIZE);

    private void LoadGrades()
    {
        var filePath = Path.Combine("wwwroot", "Data", $"{selectedYear}_final.csv");
        if (File.Exists(filePath))
        {
            var config = new CsvConfiguration(System.Globalization.CultureInfo.InvariantCulture)
            {
                Delimiter = ",",
                HasHeaderRecord = true,
                BadDataFound = null,
                MissingFieldFound = null
            };

            using (var reader = new StreamReader(filePath))
            using (var csv = new CsvReader(reader, config))
            {
                csv.Read();
                csv.ReadHeader();
                headers = csv.HeaderRecord.ToList();
                
                var records = new List<Dictionary<string, string>>();
                while (csv.Read())
                {
                    var record = new Dictionary<string, string>(headers.Count);
                    foreach (var header in headers)
                    {
                        record[header] = csv.GetField(header);
                    }
                    records.Add(record);
                }
                cache.AddOrUpdate(selectedYear, records, (key, oldValue) => records);
            }
        }
    }

    protected override void OnInitialized()
    {
        LoadGrades();
    }

    protected override void OnParametersSet()
    {
        if (!cache.ContainsKey(selectedYear))
        {
            LoadGrades();
        }
    }

    private void OnSearchChanged(string value)
    {
        searchQuery = value;
        page = 0;
        StateHasChanged();
    }

    private void OnYearChanged(string value)
    {
        selectedYear = value;
        page = 0;
        if (!cache.ContainsKey(selectedYear))
        {
            LoadGrades();
        }
        StateHasChanged();
    }
} 