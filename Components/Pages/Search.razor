@page "/search"
@using System.IO
@using System.Linq
@inject LoginService LoginService

<div class="container py-5">
    <div class="row justify-content-center mb-5">
        <div class="col-md-8 text-center">
            <h1 class="display-4 mb-4">Egyetemek keresése</h1>
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <div class="row g-3">
                        <div class="col-md-8">
                            <div class="input-group">
                                <span class="input-group-text bg-light">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control form-control-lg" placeholder="Egyetem keresése..." @bind="searchQuery" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <select class="form-select form-select-lg" @bind="selectedCity">
                                <option value="">Összes város</option>
                                @foreach (var city in cities)
                                {
                                    <option value="@city">@city</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (filteredUniversities.Any())
    {
        <div class="row g-4">
            @foreach (var uni in filteredUniversities)
            {
                <div class="col-md-4">
                    <div class="card h-100 shadow-sm hover-shadow">
                        <div class="position-relative">
                            <img src="Data@(uni.ImageUrl)" class="card-img-top" alt="@uni.Name" style="height: 200px; object-fit: cover;">
                            <div class="position-absolute top-0 end-0 m-2">
                                <span class="badge bg-primary">@uni.City</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@uni.Name</h5>
                            <a href="/university/@Uri.EscapeDataString(uni.Name)" class="btn btn-primary stretched-link">Részletek</a>
                            @if (LoginService.IsLoggedIn())
                            {
                                var eligible = IsEligibleForAnyMajor(uni.Name);
                                <div class="mt-2">
                                    @if (eligible)
                                    {
                                        <span class="badge bg-success">Van olyan szak, amire jelentkezhetsz</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Nincs olyan szak, amire jelentkezhetsz</span>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                Nincs találat a keresési feltételeknek megfelelően.
            </div>
        </div>
    }
</div>

@code {
    private string searchQuery = "";
    private string selectedCity = "";
    private List<string> cities = new List<string>();
    private List<University> universities = new List<University>();
    private List<University> filteredUniversities => universities
        .Where(u => (string.IsNullOrWhiteSpace(selectedCity) || u.City == selectedCity)
            && (string.IsNullOrWhiteSpace(searchQuery) || u.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
        .ToList();

    private List<Major> allMajors = new List<Major>();

    protected override void OnInitialized()
    {
        string csvPath = @"Data/all_universities.csv";
        if (File.Exists(csvPath))
        {
            var lines = File.ReadAllLines(csvPath);
            universities = lines.Skip(1)
                .Select(line => line.Split(','))
                .Where(parts => parts.Length > 2)
                .Select(parts => new University { 
                    Name = parts[0].Trim('"'), 
                    City = parts[1].Trim(),
                    ImageUrl = $"/{parts[2].Trim()}"
                })
                .ToList();
            cities = universities.Select(u => u.City).Distinct().OrderBy(c => c).ToList();
        }

        // Load all majors for eligibility check
        string majorsPath = @"Data/szakok_ul_li_info.csv";
        if (File.Exists(majorsPath))
        {
            var lines = File.ReadAllLines(majorsPath);
            allMajors = lines.Skip(1)
                .Select(line => line.Split(','))
                .Where(parts => parts.Length > 2)
                .Select(parts => new Major { 
                    Name = parts[0].Trim('"'), 
                    URL = parts[1].Trim(),
                    Content = parts[2]
                })
                .ToList();
        }
    }

    private bool IsEligibleForAnyMajor(string universityName)
    {
        var majors = allMajors;
        if (majors.Count == 0) return false;
        foreach (var major in majors)
        {
            if (CheckEligibility(major)) return true;
        }
        return false;
    }

    private bool CheckEligibility(Major major)
    {
        var romanian = LoginService.GetRomanianGrade();
        var mandatory = LoginService.GetMandatoryGrade();
        var chosen = LoginService.GetChosenGrade();
        var native = LoginService.GetNativeGrade();
        var content = major.Content.ToLower();
        var average = (romanian + mandatory + chosen) / 3;

        if (content.Contains("100% az érettségi vizsga átlaga") || 
            content.Contains("100% érettségi átlag"))
        {
            return average >= 5;
        }

        if (content.Contains("50% az érettségi vizsga átlaga"))
        {
            if (content.Contains("magyar nyelv") || content.Contains("román nyelv"))
            {
                return romanian >= 5;
            }
            return average >= 5;
        }

        if (content.Contains("25% az érettségi vizsga átlaga"))
        {
            if (content.Contains("matematika") || content.Contains("informatika") || content.Contains("fizika"))
            {
                return mandatory >= 5 || chosen >= 5;
            }
            return average >= 5;
        }

        return false;
    }

    private class University
    {
        public string Name { get; set; }
        public string City { get; set; }
        public string ImageUrl { get; set; }
    }

    private class Major
    {
        public string Name { get; set; }
        public string URL { get; set; }
        public string Content { get; set; }
    }
} 