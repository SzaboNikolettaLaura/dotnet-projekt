@page "/profile"
@using Microsoft.AspNetCore.Components.Web
@using System.IO
@using System.Linq
@using CsvHelper
@using CsvHelper.Configuration
@using System.Globalization

@inject LoginService LoginService
@inject NavigationManager NavigationManager

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="display-5 fw-bold text-primary">Profil</h1>
                <button class="btn btn-outline-danger" @onclick="Logout">
                    <i class="bi bi-box-arrow-right me-2"></i>
                    Kijelentkezés
                </button>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="card-body p-4">
                    <div class="row g-3">
                        <div class="col-md-12">
                            <div class="form-floating mb-3">
                                <input type="email" class="form-control" id="email" @bind="email" disabled="@(!isEditing)" placeholder="Email" />
                                <label for="email">Email</label>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <input type="text" class="form-control" id="code" @bind="code" placeholder="TM202461" disabled="@(!isEditing)" />
                                <label for="code">Kód</label>
                                @if (showCodeError)
                                {
                                    <div class="invalid-feedback d-block">Érvénytelen kód a kiválasztott évhez</div>
                                }
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <select class="form-select" id="year" @bind="selectedYear" disabled="@(!isEditing)">
                                    @foreach (var year in years)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                                <label for="year">Év</label>
                            </div>
                        </div>
                    </div>

                    @if (!isEditing)
                    {
                        <button class="btn btn-primary" @onclick="EnableEditing">
                            <i class="bi bi-pencil me-2"></i>
                            Szerkesztés
                        </button>
                    }
                    else
                    {
                        <div class="mt-3">
                            <button class="btn btn-success me-2" @onclick="SaveChanges">
                                <i class="bi bi-check-lg me-2"></i>
                                Mentés
                            </button>
                            <button class="btn btn-secondary" @onclick="CancelEditing">
                                <i class="bi bi-x-lg me-2"></i>
                                Mégse
                            </button>
                        </div>
                    }
                </div>
            </div>

            <div class="row @(isValidCode ? "" : "blur-overlay")">
                @if (!isValidCode)
                {
                    <div class="blur-text">Írj be egy kódot</div>
                }
                <div class="col-md-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body text-center">
                            <h5 class="card-title text-primary">@romanianSubject</h5>
                            <div class="display-4 fw-bold text-primary">@number1</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body text-center">
                            <h5 class="card-title text-primary">@mandatorySubject</h5>
                            <div class="display-4 fw-bold text-primary">@number2</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body text-center">
                            <h5 class="card-title text-primary">@chosenSubject</h5>
                            <div class="display-4 fw-bold text-primary">@number3</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card shadow-sm h-100">
                        <div class="card-body text-center">
                            <h5 class="card-title text-primary">@nativeSubject</h5>
                            <div class="display-4 fw-bold text-primary">@number4</div>
                        </div>
                    </div>
                </div>
            </div>

            @if (isValidCode)
            {
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h4 class="card-title text-primary mb-4">Statisztikák @selectedYear-re</h4>
                                <div class="row g-4">
                                    <div class="col-md-3">
                                        <div class="text-center p-3">
                                            <div class="display-6 text-primary mb-2">
                                                <i class="bi bi-people"></i>
                                            </div>
                                            <h6 class="text-muted">Összes diák</h6>
                                            <h4 class="fw-bold">@GetTotalStudents()</h4>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center p-3">
                                            <div class="display-6 text-primary mb-2">
                                                <i class="bi bi-graph-up"></i>
                                            </div>
                                            <h6 class="text-muted">Sikeres arány</h6>
                                            <h4 class="fw-bold">@GetPassRate()%</h4>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center p-3">
                                            <div class="display-6 text-primary mb-2">
                                                <i class="bi bi-trophy"></i>
                                            </div>
                                            <h6 class="text-muted">Top 10% átlag</h6>
                                            <h4 class="fw-bold">@GetTop10Average()</h4>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="text-center p-3">
                                            <div class="display-6 text-primary mb-2">
                                                <i class="bi bi-person"></i>
                                            </div>
                                            <h6 class="text-muted">Saját átlag</h6>
                                            <h4 class="fw-bold">@GetStudentAverage()</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .blur-overlay {
        position: relative;
    }

    .blur-overlay::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(4px);
        z-index: 1;
        border-radius: 0.5rem;
    }

    .blur-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 2;
        color: #2c3e50;
        font-size: 1.5rem;
        font-weight: 700;
        text-align: center;
        width: 100%;
    }

    .card {
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
    }

    .form-floating > .form-control:focus ~ label,
    .form-floating > .form-control:not(:placeholder-shown) ~ label {
        color: #0d6efd;
    }

    .invalid-feedback {
        font-size: 0.875rem;
    }
</style>

@code {
    private string email = "";
    private string code = "";
    private int selectedYear;
    private List<int> years;
    private float number1;
    private float number2;
    private float number3;
    private float number4;
    private bool isEditing = false;
    private string tempEmail = "";
    private string tempCode = "";
    private int tempYear;
    private bool showCodeError = false;
    private bool isValidCode = false;
    private string romanianSubject = "Romanian Grade";
    private string mandatorySubject = "Mandatory Subject Grade";
    private string chosenSubject = "Chosen Subject Grade";
    private string nativeSubject = "Native Language Grade";

    protected override async Task OnInitializedAsync()
    {
        years = Enumerable.Range(2014, 2023 - 2014 + 1).Reverse().ToList();
        selectedYear = DateTime.Now.Year;
        number1 = 0;
        number2 = 0;
        number3 = 0;
        number4 = 0;
        email = LoginService.GetEmail();
    }

    protected override async Task OnParametersSetAsync()
    {
        number1 = 0;
        number2 = 0;
        number3 = 0;
        number4 = 0;
        email = LoginService.GetEmail();
    }

    private void Logout()
    {
        LoginService.Logout();
        NavigationManager.NavigateTo("/login");
        number1 = 0;
        number2 = 0;
        number3 = 0;
        number4 = 0;
    }

    private void EnableEditing()
    {
        isEditing = true;
        tempEmail = email;
        tempCode = code;
        tempYear = selectedYear;
        showCodeError = false;
        isValidCode = false;
        number1 = 0;
        number2 = 0;
        number3 = 0;
        number4 = 0;
    }

    private async Task<bool> ValidateCodeAndYear()
    {
        try
        {
            string csvPath = $"wwwroot/data/{selectedYear}_final.csv";
            if (!File.Exists(csvPath))
            {
                showCodeError = true;
                isValidCode = false;
                return false;
            }

            var lines = await File.ReadAllLinesAsync(csvPath);
            var headerLine = lines[0];
            var headers = headerLine.Split(',');

            var romanianIndex = Array.IndexOf(headers, "romanian_grade_final");
            var mandatoryIndex = Array.IndexOf(headers, "mandatory_grade_final");
            var chosenIndex = Array.IndexOf(headers, "chosen_grade_final");
            var nativeIndex = Array.IndexOf(headers, "native_grade_final");
            var codeIndex = Array.IndexOf(headers, "code");
            var mandatorySubjectIndex = Array.IndexOf(headers, "mandatory_subject");
            var chosenSubjectIndex = Array.IndexOf(headers, "chosen_subject");
            var nativeSubjectIndex = Array.IndexOf(headers, "native_subject");

            if (romanianIndex == -1 || mandatoryIndex == -1 || chosenIndex == -1 || codeIndex == -1)
            {
                showCodeError = true;
                isValidCode = false;
                return false;
            }

            var matchingLine = lines.Skip(1).FirstOrDefault(line => 
            {
                var values = line.Split(',');
                return values.Length > codeIndex && values[codeIndex].Trim() == code.Trim();
            });

            if (matchingLine == null)
            {
                showCodeError = true;
                isValidCode = false;
                return false;
            }

            var values = matchingLine.Split(',');
            if (values.Length > Math.Max(romanianIndex, Math.Max(mandatoryIndex, chosenIndex)))
            {
                if (float.TryParse(values[romanianIndex].Trim(), CultureInfo.InvariantCulture, out float romanianGrade))
                    number1 = romanianGrade;
                if (float.TryParse(values[mandatoryIndex].Trim(), CultureInfo.InvariantCulture, out float mandatoryGrade))
                    number2 = mandatoryGrade;
                if (float.TryParse(values[chosenIndex].Trim(), CultureInfo.InvariantCulture, out float chosenGrade))
                    number3 = chosenGrade;
                if (nativeIndex != -1 && float.TryParse(values[nativeIndex].Trim(), CultureInfo.InvariantCulture, out float nativeGrade) && nativeGrade > 0)
                    number4 = nativeGrade;

                if (mandatorySubjectIndex != -1)
                    mandatorySubject = values[mandatorySubjectIndex].Trim() + " Grade";
                if (chosenSubjectIndex != -1)
                    chosenSubject = values[chosenSubjectIndex].Trim() + " Grade";
                if (nativeSubjectIndex != -1)
                    nativeSubject = values[nativeSubjectIndex].Trim() + " Grade";
            }

            isValidCode = true;
            return true;
        }
        catch (Exception ex)
        {
            showCodeError = true;
            isValidCode = false;
            return false;
        }
    }

    private async Task SaveChanges()
    {
        if (await ValidateCodeAndYear())
        {
            isEditing = false;
            showCodeError = false;
        }
        else
        {
            code = "";
            selectedYear = DateTime.Now.Year;
            isValidCode = false;
            number1 = 0;
            number2 = 0;
            number3 = 0;
            number4 = 0;
        }
    }

    private void CancelEditing()
    {
        isEditing = false;
        email = tempEmail;
        code = tempCode;
        selectedYear = tempYear;
        showCodeError = false;
        isValidCode = false;
        number1 = 0;
        number2 = 0;
        number3 = 0;
        number4 = 0;
    }

    private string GetTotalStudents()
    {
        try
        {
            var lines = File.ReadAllLines("Data/grade_statistics.csv");
            var matchingLine = lines.Skip(1).FirstOrDefault(line => line.StartsWith(selectedYear.ToString()));
            if (matchingLine != null)
            {
                var values = matchingLine.Split(',');
                return int.Parse(values[1]).ToString("N0");
            }
        }
        catch { }
        return "-";
    }

    private string GetPassRate()
    {
        try
        {
            Console.WriteLine("hello");
            var lines = File.ReadAllLines("Data/grade_statistics.csv");
            var matchingLine = lines.Skip(1).FirstOrDefault(line => line.StartsWith(selectedYear.ToString()));
            Console.WriteLine(matchingLine);
            if (matchingLine != null)
            {
                var values = matchingLine.Split(',');
                return float.Parse(values[6], CultureInfo.InvariantCulture).ToString("F1");
            }
        }
        catch { }
        return "-";
    }

    private string GetTop10Average()
    {
        try
        {
            var lines = File.ReadAllLines("Data/grade_statistics.csv");
            var matchingLine = lines.Skip(1).FirstOrDefault(line => line.StartsWith(selectedYear.ToString()));
            if (matchingLine != null)
            {
                var values = matchingLine.Split(',');
                return float.Parse(values[7], CultureInfo.InvariantCulture).ToString("F2");
            }
        }
        catch { }
        return "-";
    }

    private string GetStudentAverage()
    {
        if (number1 > 0 && number2 > 0 && number3 > 0)
        {
            if (number4 > 0)
            {
                return ((number1 + number2 + number3 + number4) / 4).ToString("F2");
            }
            return ((number1 + number2 + number3) / 3).ToString("F2");
        }
        return "-";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            number1 = 0;
            number2 = 0;
            number3 = 0;
            number4 = 0;
        }
    }
} 